name: 'Create Github Release'
description: "Create a new Github Release with auto-generated notes"
inputs:
  github-automation-token:
    description: "A Github oauth token with sufficent permissions to make, approve, and merge PRs"
    required: true
  sha:
    description: 'The target release SHA hash'
    required: true
runs:
  using: 'composite'
  steps:
    - name: 'Add masks'
      shell: bash
      run: |
        echo "::add-mask::${{ inputs.github-automation-token }}"

    # Creates a Github release (and tag) with the current date and time
    # Gets all the commits other than merge commits in the branch from the last tag
    - name: 'Get Release Info'
      id: release-info
      shell: bash
      run: |
        RELEASE_NOTES="$(git log --pretty='%ci - %s (%an)' $(git describe --tags --abbrev=0)...@ | grep -vE '^.{25} - Merge.*'||:)"
        RELEASE_NOTES="${RELEASE_NOTES//'%'/'%25'}"
        RELEASE_NOTES="${RELEASE_NOTES//$'\n'/'%0A'}"
        RELEASE_NOTES="${RELEASE_NOTES//$'\r'/'%0D'}"
        echo "notes=${RELEASE_NOTES}" >> $GITHUB_OUTPUT
        echo "tag=$(TZ=America/Los_Angeles date +'%Y-%m-%dTH%H-M%M')" >> $GITHUB_OUTPUT

    - name: 'Create a Release via API'
      id: create_release
      uses: actions/github-script@v6
      env:
        GITHUB_TOKEN: ${{ inputs.github-automation-token }}
        TAG: ${{ steps.release-info.outputs.tag }}
        RELEASE: ${{ steps.release-info.outputs.tag }}
        BODY: ${{ steps.release-info.outputs.notes }}
        COMMIT: ${{ inputs.sha }}
      with:
        debug: true
        script: |
          const { TAG, RELEASE, BODY, COMMIT } = process.env;
          try {
            const createReleaseResponse = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo,
              tag_name: TAG,
              name: RELEASE,
              body: BODY,
              draft: false,
              prerelease: false,
              target_commitish: COMMIT,
            });
          } catch (err) {
            core.setFailed(err.message);
          }

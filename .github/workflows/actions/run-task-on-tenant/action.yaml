zname: 'Run task on tenant'
description: 'Run a task in a given tenant'
inputs:
  name:
    description: "The name of the running job"
    required: true
  project-name:
    description: "The name of the project"
    required: true
    type: string
  env:
    description: "The deployment environment PROD | UAT | DEV"
    required: true
    type: string
  command:
    description: "The command to run"
    required: true
  args:
    description: "A JSON array of arguments to the command"
    required: true
  branch:
    description: "The branch name"
    required: true
  region:
    description: "The region the tenant is in"
    required: true
  cluster-suffix:
    description: "A suffix to differentiate tenants in the same region"
    required: true
  tenant-name:
    description: "The name of the tenant"
    required: true
  namespace:
    description: "The kubernetes namespace the tenant is in"
    required: true
  stage:
    description: "One of contexts: 'stage' or 'prod'"
    required: true
  dry-run:
    description: "When true, only does a dry run of the deployment"
    required: true
  aws-access-key-id:
    description: "An AWS Access Key ID with sufficient permissions to read from EKS clusters"
    required: true
  aws-secret-access-key:
    description: "An AWS Secret Access Key matching the given access key id"
    required: true
  aws-account-id:
    description: "An AWS Account ID to form ECR URLs from"
    required: true
  gh_pat:
    description: "A GitHub personal access token"
    required: true

runs:
  using: 'composite'
  steps:
    - name: 'Add masks'
      shell: bash
      run: |
        echo "::add-mask::${{ inputs.aws-access-key-id }}"
        echo "::add-mask::${{ inputs.aws-secret-access-key }}"
        echo "::add-mask::${{ inputs.aws-account-id }}"
        echo "::add-mask::${{ inputs.gh_pat }}"

    - uses: actions/checkout@v3
      with:
        repository: onboardiq/${{ inputs.project-name }}
        ref: ${{ inputs.branch }}
        fetch-depth: 1

    - uses: actions/checkout@v3
      with:
        repository: onboardiq/gh-common-workflows
        path: ./common-workflows
        fetch-depth: 1

    - name: 'Image tag'
      id: image-tag
      shell: bash
      env:
        BRANCH: ${{ inputs.branch }}
      run: |
        sha=$(git rev-parse HEAD)
        echo "result=${BRANCH##*/}-${sha::7}" >> $GITHUB_OUTPUT

    - name: 'Install Kubectl'
      id: install-kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: v1.19.0

      # GITHUB_RUN_ID is the unique identifier (id) within a repo
    - name: 'Set the KUBECONFIG'
      shell: bash
      run: |
        echo KUBECONFIG=${RUNNER_TEMP}/kubeconfig_${GITHUB_RUN_ID} >> $GITHUB_ENV

    - name: 'Get the kubeconfig'
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws-access-key-id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws-secret-access-key }}
        AWS_DEFAULT_REGION: ${{ inputs.region }}
      shell: bash
      run: |
          aws eks update-kubeconfig \
          --name eng-${{ inputs.region }}-${{ inputs.stage }}-application-cluster ${{ inputs.cluster-suffix }}\
          --alias aws-${{ inputs.region }}-${{ inputs.stage }} \
          --kubeconfig ${KUBECONFIG} \
          --region ${{ inputs.region }}

    - name: Write job manifest
      env:
        REGION: ${{ inputs.region }}
        NAMESPACE: ${{ inputs.namespace }}
        PROJECT: ${{ inputs.project-name }}
        COMMAND: ${{ inputs.command }}
        ARGS: ${{ inputs.args }}
        NAME: ${{ inputs.name }}
        AWS_ACCOUNT_ID: ${{ inputs.aws-account-id }}
        TAG: ${{ steps.image-tag.outputs.result }}
      shell: bash
      run: node common-workflows/.github/workflows/actions/run-task-on-tenant/create-job-manifest.js

    - name: Test job
      shell: bash
      run: kubectl apply job.json --dry-run=client

    - name: Apply job
      shell: bash
      if: ${{ inputs.dry-run == 'false' }}
      run: kubectl apply job.json

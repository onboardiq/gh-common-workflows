name: 'Create Github Deployment'
description: "Create a new Github Deployment"
inputs:
  github-automation-token:
    description: "A Github oauth token with sufficent permissions to make, approve, and merge PRs"
    required: true
  repo:
    description: 'The target repo to make a deployment for'
    required: true
  owner:
    description: 'The owner of the target repo'
    required: true
  ref:
    description: "A valid Git ref to be marked as having been deployed"
    required: true
  env:
    description: 'The environment deployed to one of "prod", "dev", "uat"'
    required: true

runs:
  using: 'composite'
  steps:
    - name: 'Add masks'
      shell: bash
      run: |
        echo "::add-mask::${{ inputs.github-automation-token }}"

    - name: 'Create a Deployment via API'
      uses: actions/github-script@v6
      env:
        REF: ${{ inputs.ref }}
        REPO: ${{ inputs.repo }}
        OWNER: ${{ inputs.owner }}
        ENVIRONMENT: ${{ inputs.env }}
      with:
        debug: true
        github-token: ${{ inputs.github-automation-token }}
        script: |
          const { REF, REPO, OWNER, ENVIRONMENT } = process.env;

          const environment = ENVIRONMENT === 'prod' ? 'production' : ENVIRONMENT;

          try {
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: OWNER,
              repo: REPO,
              ref: REF,
              environment,
              auto_merge: false,
              required_contexts: []
            });

            await github.request(
            'POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses',
            {
              owner: OWNER,
              repo: REPO,
              deployment_id: deployment.id,
              environment: 'production',
              state: 'success',
              description: 'Deployment finished successfully.'
            })
          } catch (err) {
            core.setFailed(err.message);
          }

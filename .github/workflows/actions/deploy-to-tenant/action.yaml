name: 'Deploy to Tenant'
description: "Deploy via Helm to a Tenant"
inputs:
  helm-version:
    description: 'The version of Helm to use'
    required: true
  chart-version:
    description: 'The base version of the chart with the format X.Y.Z'
    required: true
  region:
    description: "The region the tenant is in"
    required: true
  cloud:
    description: "The cloud service the tenant is in"
    required: true
  eks-suffix:
    description: "A suffix to differentiate tenants in the same region"
    required: true
  tenant-name:
    description: "The name of the tenant"
    required: true
  namespace:
    description: "The kubernetes namespace the tenant is in"
    required: true
  context:
    description: "One of contexts: 'stage' or 'prod'"
    required: true
  dry-run:
    description: "When true, only does a dry run of the deployment"
    required: true
  aws-access-key-id:
    description: "An AWS Access Key ID with sufficient permissions to read from EKS clusters"
    required: true
  aws-secret-access-key:
    description: "An AWS Secret Access Key matching the given access key id"
    required: true
  aws-account-id:
    description: "An AWS Account ID to form ECR URLs from"
    required: true
  include_faut_reset_cronjob:
    description: "Pass 1 to include a faut reset cronjob"
    required: false
  gh_pat:
    description: "A GitHub personal access token"
    required: true
  helm_repo_username:
    description: "Helm repo username"
    required: true
  helm_repo_password:
    description: "Helm repo password"
    required: true
  ref:
    description: "The branch or tag name or SHA to check out"
    required: true
    type: string
  commit-sha:
    description: "The SHA corresponding to the above ref"
    required: true
    type: string
  project-name:
    description: "The name of the project"
    required: true
    type: string
  doppler-token:
    description: "The token required to intract with the doppler API"
    type: string
  env:
    description: "The deployment environment PROD | UAT | DEV"
    required: true
    type: string
  helm-makefile-location:
    description: "Path to directory from the repo root where the helm Makefile is present"
    required: true
    type: string
  doppler-project-name:
    description: "Name of the doppler project. Its often same as 'project-name'"
    required: true
    type: string

runs:
  using: 'composite'
  steps:
    - name: 'Add masks'
      shell: bash
      run: |
        echo "::add-mask::${{ inputs.aws-access-key-id }}"
        echo "::add-mask::${{ inputs.aws-secret-access-key }}"
        echo "::add-mask::${{ inputs.aws-account-id }}"
        echo "::add-mask::${{ inputs.doppler-token }}"
        echo "::add-mask::${{ inputs.gh_pat }}"
        echo "::add-mask::${{ inputs.helm_repo_username }}"
        echo "::add-mask::${{ inputs.helm_repo_password }}"

    - uses: actions/checkout@v3
      with:
        repository: onboardiq/${{ inputs.project-name }}
        token: ${{ inputs.gh_pat }}

    - uses: actions/checkout@v3
      with:
        repository: onboardiq/gh-common-workflows
        path: ./common-workflows
        fetch-depth: 1

    - name: "Install Doppler CLI"
      uses: dopplerhq/cli-action@v2
      if: ${{ inputs.doppler-token != 0 && inputs.doppler-token != '' }}

    - name: 'Install Kubectl'
      id: install-kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: v1.21.0

    - name: 'Install and Setup Helm'
      uses: Azure/setup-helm@v3
      with:
        version: ${{ inputs.helm-version }}
        token: ${{ inputs.gh_pat }}

    # GITHUB_RUN_ID is the unique identifier (id) within a repo
    - name: 'Set the KUBECONFIG'
      shell: bash
      run: |
        echo KUBECONFIG=${RUNNER_TEMP}/kubeconfig_${GITHUB_RUN_ID} >> $GITHUB_ENV

    - name: 'Get the kubeconfig'
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws-access-key-id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws-secret-access-key }}
        AWS_DEFAULT_REGION: ${{ inputs.region }}
      shell: bash
      run: |
        aws eks update-kubeconfig \
          --name eng-${{ inputs.region }}-${{ inputs.context }}-application-cluster${{ inputs.eks-suffix }} \
          --alias aws-${{ inputs.region }}-${{ inputs.context }} \
          --kubeconfig ${KUBECONFIG} \
          --region ${{ inputs.region }}

    - id: version
      uses: ./common-workflows/.github/workflows/actions/version
      with:
        ref: ${{ inputs.ref }}
        commit-sha: ${{ inputs.commit-sha }}
        base-chart-version: ${{ inputs.chart-version }}

    - name: "Configure AWS credentials"
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.region }}

    - name: "Manage Doppler Secret"
      if: ${{ (inputs.doppler-token != 0 && inputs.doppler-token != '') && (inputs.dry-run == 'false' || inputs.dry-run == false) }}
      uses: ./common-workflows/.github/workflows/actions/manage-doppler-secret
      with:
        doppler-project: ${{ inputs.doppler-project-name }}
        tenant-name: ${{ inputs.tenant-name }}
        namespace: ${{ inputs.namespace }}
        environment: ${{ inputs.env }}
        doppler-token: ${{ inputs.doppler-token }}

    - name: 'Deployment Dry Run'
      if: ${{ inputs.dry-run == 'true' || inputs.dry-run == true }}
      env:
        AWS_ACCOUNT_ID: ${{ inputs.aws-account-id }}
        AWS_ACCESS_KEY_ID: ${{ inputs.aws-access-key-id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws-secret-access-key }}
        CHART_VERSION: ${{ steps.version.outputs.chart-version }}
        CLOUD: ${{ inputs.cloud }}
        CLUSTER_SUFFIX: ${{ inputs.eks-suffix }}
        DOPPLER_ENV: ${{ inputs.env }}
        DOPPLER_TOKEN: ${{ inputs.doppler-token }}
        HELM_REPO_PASSWORD: ${{ inputs.helm_repo_password }}
        HELM_REPO_USERNAME: ${{ inputs.helm_repo_username }}
        IMAGE_TAG: ${{ steps.version.outputs.image-tag }}
        INCLUDE_FAUT_RESET_CRONJOB: ${{ inputs.include_faut_reset_cronjob }}
        NAMESPACE: ${{ inputs.namespace }}
        REGION: ${{ inputs.region }}
        TENANT: ${{ inputs.tenant-name }}
        COMMIT_SHA: ${{ inputs.commit-sha}}
      shell: bash
      run: |
        kubectl config use-context aws-${{ inputs.region }}-${{ inputs.context }}
        make -C ${{ inputs.helm-makefile-location }} test

    - name: 'Deployment - LIVE'
      if: ${{ inputs.dry-run == 'false' || inputs.dry-run == false }}
      env:
        AWS_ACCOUNT_ID: ${{ inputs.aws-account-id }}
        AWS_ACCESS_KEY_ID: ${{ inputs.aws-access-key-id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws-secret-access-key }}
        CHART_VERSION: ${{ steps.version.outputs.chart-version }}
        CLOUD: ${{ inputs.cloud }}
        CLUSTER_SUFFIX: ${{ inputs.eks-suffix }}
        DOPPLER_ENV: ${{ inputs.env }}
        DOPPLER_TOKEN: ${{ inputs.doppler-token }}
        HELM_REPO_PASSWORD: ${{ inputs.helm_repo_password }}
        HELM_REPO_USERNAME: ${{ inputs.helm_repo_username }}
        IMAGE_TAG: ${{ steps.version.outputs.image-tag }}
        INCLUDE_FAUT_RESET_CRONJOB: ${{ inputs.include_faut_reset_cronjob }}
        NAMESPACE: ${{ inputs.namespace }}
        REGION: ${{ inputs.region }}
        TENANT: ${{ inputs.tenant-name }}
        COMMIT_SHA: ${{ inputs.commit-sha}}
      shell: bash
      run: |
        kubectl config use-context aws-${{ inputs.region }}-${{ inputs.context }}
        make -C ${{ inputs.helm-makefile-location }} install
